% this is a comment


all variables are mxn matrices
1x1 matrix: scalar
1xn, mx1: vector


multiline statements...
	continued here;

who: list all variables in current workspace
clear: clear all temp vars

ctrl-c: kill execution

save: save session to matlab.mat


matrix quick functions:
"
eye identity matrix
zeros matrix of zeros
ones matrix of ones
diag see below
triu upper triangular part of a matrix
tril lower triangular part of a matrix
rand randomly generated matrix
hilb Hilbert matrix
magic magic square
toeplitz see help toeplitz
"

for:

x = [];
for i = 1:n
	x = [x,i^2]
end

	reverse order for:

for i = n:-1:1

while:

while relation
	statements;
end

if:

if relation
	statements;
elseif
	statements;
end

or

if statement, do; else, statement; end

relational operators:
	< less than
	> greater than
	<= less than or equal
	>= greater than or equal
	== equal
	âˆ¼= not equal.
assignment operator:
	=

note: ~= operator checks for each entry in vector. all must be false for it to be true
use any(any( A~=B)) to check if one or more differ

results in 1 or 0


vectors:
	for loops iterate through a temp vector
notation:
start:increment:end

or

start:end

':' denotes entire row or column
i.e.

for a matrix A, A(:,4) 4th column of A

functions:
have their own file per function
no global variables (unless v4.0)

nargin: num args in, i.e. int argc in c++

format short/long e
short = 4 decimals, long = 14 decimals, e if want scientific mode

anonymous/lambda function:
		<name> = @(x) <do something with x>;
		i.e. normalize = @(x) x/sum(x);

static cast double:
	double(varname)
